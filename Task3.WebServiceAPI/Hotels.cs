// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HotelParser;
//
//    var hotels = Hotels.FromJson(jsonString);

namespace HotelParser
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Hotels
    {
        [JsonProperty("hotel", NullValueHandling = NullValueHandling.Ignore)]
        public Hotel Hotel { get; set; }

        [JsonProperty("hotelRates", NullValueHandling = NullValueHandling.Ignore)]
        public List<HotelRate> HotelRates { get; set; }
    }

    public partial class Hotel
    {
        [JsonProperty("classification", NullValueHandling = NullValueHandling.Ignore)]
        public long? Classification { get; set; }

        [JsonProperty("hotelID", NullValueHandling = NullValueHandling.Ignore)]
        public long? HotelId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("reviewscore", NullValueHandling = NullValueHandling.Ignore)]
        public double? Reviewscore { get; set; }
    }

    public partial class HotelRate
    {
        [JsonProperty("adults", NullValueHandling = NullValueHandling.Ignore)]
        public long? Adults { get; set; }

        [JsonProperty("los", NullValueHandling = NullValueHandling.Ignore)]
        public long? Los { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public Price Price { get; set; }

        [JsonProperty("rateDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string RateDescription { get; set; }

        [JsonProperty("rateID", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? RateId { get; set; }

        [JsonProperty("rateName", NullValueHandling = NullValueHandling.Ignore)]
        public string RateName { get; set; }

        [JsonProperty("rateTags", NullValueHandling = NullValueHandling.Ignore)]
        public List<RateTag> RateTags { get; set; }

        [JsonProperty("targetDay", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? TargetDay { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("currency", NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("numericFloat", NullValueHandling = NullValueHandling.Ignore)]
        public double? NumericFloat { get; set; }

        [JsonProperty("numericInteger", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumericInteger { get; set; }
    }

    public partial class RateTag
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Shape { get; set; }
    }

    public partial class Hotels
    {
        public static List<Hotels> FromJson(string json) => JsonConvert.DeserializeObject<List<Hotels>>(json, HotelParser.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Hotels> self) => JsonConvert.SerializeObject(self, HotelParser.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
